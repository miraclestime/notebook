createdAt: "2020-03-25T03:17:55.920Z"
updatedAt: "2020-03-25T03:24:17.078Z"
type: "MARKDOWN_NOTE"
folder: "3a738d5349859a4d2f15"
title: "后端获取真实IP"
tags: []
content: '''
  ## 后端获取真实IP
  
  ### 没有使用nginx
  request.getRemoteAddr()可获取真实ip
  
  ### 使用nginx
  nginx反向代理，会进行“二次请求”，所以获取到的ip地址是nginx服务器的内网ip地址
  
  进行以下配置：
  
  ```
  #Nginx 设置
  
  location  ~  ^/static {
  proxy_pass  ....;
  proxy_set_header X-Forward-For $remote_addr ;
  }
  ```
  
  ### 参考代码
  ```
  public class IpUtils {
      public static final String _255 = "(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
      public static final Pattern pattern = Pattern.compile("^(?:" + _255 + "\\\\.){3}" + _255 + "$");
  
      public static String longToIpV4(long longIp) {
          int octet3 = (int) ((longIp >> 24) % 256);
          int octet2 = (int) ((longIp >> 16) % 256);
          int octet1 = (int) ((longIp >> 8) % 256);
          int octet0 = (int) ((longIp) % 256);
          return octet3 + "." + octet2 + "." + octet1 + "." + octet0;
      }
  
      public static long ipV4ToLong(String ip) {
          String[] octets = ip.split("\\\\.");
          return (Long.parseLong(octets[0]) << 24) + (Integer.parseInt(octets[1]) << 16)
                  + (Integer.parseInt(octets[2]) << 8) + Integer.parseInt(octets[3]);
      }
  
      public static boolean isIPv4Private(String ip) {
          long longIp = ipV4ToLong(ip);
          return (longIp >= ipV4ToLong("10.0.0.0") && longIp <= ipV4ToLong("10.255.255.255"))
                  || (longIp >= ipV4ToLong("172.16.0.0") && longIp <= ipV4ToLong("172.31.255.255"))
                  || longIp >= ipV4ToLong("192.168.0.0") && longIp <= ipV4ToLong("192.168.255.255");
      }
  
      public static boolean isIPv4Valid(String ip) {
          return pattern.matcher(ip).matches();
      }
  
      public static String getIpFromRequest(HttpServletRequest request) {
          String ip;
          boolean found = false;
          if ((ip = request.getHeader("x-forwarded-for")) != null) {
              StrTokenizer tokenizer = new StrTokenizer(ip, ",");
              while (tokenizer.hasNext()) {
                  ip = tokenizer.nextToken().trim();
                  if (isIPv4Valid(ip) && !isIPv4Private(ip)) {
                      found = true;
                      break;
                  }
              }
          }
          if (!found) {
              ip = request.getRemoteAddr();
          }
          return ip;
      }
  
  }
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
